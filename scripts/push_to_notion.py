#!/usr/bin/env python3
"""
Push a CSV of mismatch summaries to a Notion database. Each row in the CSV
becomes a page in the specified database. This helper script is optional
for workflows that want to mirror analysis results into Notion.

The script expects either environment variables or CLI flags for the Notion
integration token and database ID. CSV columns should include:

    matchup, week, home_pass_tilt, away_pass_tilt, tilt

Additional columns in the CSV are ignored.
"""

from __future__ import annotations

import argparse
import os
from typing import Any, Dict

import pandas as pd
import requests


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Push mismatch summary to Notion")
    parser.add_argument(
        "--csv",
        type=str,
        required=True,
        help="Path to CSV file generated by top_mismatches.py",
    )
    parser.add_argument(
        "--season",
        type=int,
        required=True,
        help="Season year (used in the Notion page properties)",
    )
    parser.add_argument(
        "--week",
        type=int,
        required=True,
        help="Week number (used in the Notion page properties)",
    )
    parser.add_argument(
        "--token",
        type=str,
        default=None,
        help="Notion integration token (overrides NOTION_TOKEN env var)",
    )
    parser.add_argument(
        "--database-id",
        type=str,
        default=None,
        help="Notion database ID (overrides NOTION_DATABASE_ID env var)",
    )
    return parser.parse_args()


def get_notion_creds(args: argparse.Namespace) -> tuple[str, str]:
    token = args.token or os.getenv("NOTION_TOKEN")
    database_id = args.database_id or os.getenv("NOTION_DATABASE_ID")
    if not token:
        raise ValueError(
            "Missing Notion token. Set NOTION_TOKEN env var or use --token."
        )
    if not database_id:
        raise ValueError(
            "Missing Notion database ID. Set NOTION_DATABASE_ID env var or use --database-id."
        )
    return token, database_id


def page_payload(
    row: Dict[str, Any], season: int, week: int, database_id: str
) -> Dict[str, Any]:
    """Construct the JSON payload for a Notion page representing a matchup."""
    return {
        "parent": {"database_id": database_id},
        "properties": {
            "Matchup": {
                "title": [{"text": {"content": str(row.get("matchup"))}}]
            },
            "Week": {"number": week},
            "Season": {"number": season},
            "HomePassTilt": {
                "number": float(row.get("home_pass_tilt", 0))
            },
            "AwayPassTilt": {
                "number": float(row.get("away_pass_tilt", 0))
            },
            "Tilt": {"number": float(row.get("tilt", 0))},
        },
    }


def push_to_notion(csv_path: str, season: int, week: int, token: str, database_id: str) -> None:
    df = pd.read_csv(csv_path)
    headers = {
        "Authorization": f"Bearer {token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    url = "https://api.notion.com/v1/pages"
    for _, row in df.iterrows():
        payload = page_payload(row, season, week, database_id)
        resp = requests.post(url, headers=headers, json=payload)
        if resp.status_code != 200:
            raise RuntimeError(
                f"Failed to create Notion page for {row.get('matchup')}: {resp.text}"
            )
        print(f"Created Notion page for {row.get('matchup')}")


def main() -> None:
    args = parse_args()
    token, db_id = get_notion_creds(args)
    push_to_notion(args.csv, args.season, args.week, token, db_id)


if __name__ == "__main__":
    main()
